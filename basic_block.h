#ifndef BASIC_BLOCK_H_
#define BASIC_BLOCK_H_
#include "symtbl.h"
struct basic_block;
typedef struct PreList {
	int m;
	struct basic_block* ptr;
	struct PreList* next;
}PreList;

typedef struct basic_block {
	int begin;
	int end;
	int m;
	struct basic_block* prev;
	struct basic_block* next;
	struct basic_block* follow;
	struct basic_block* jump;
	struct func_block* fb;
	PreList *predecessor;
}basic_block;

typedef struct map_table {
	int isTmp;
	int tmp_k;
	char* var_name;
}map_table;

typedef struct CStrList {
	int c_str;
	struct CStrList* next;
}CStrList;

typedef struct ImmList {
	int imm;
	struct ImmList* next;
}ImmList;

typedef struct PtrInfo {
	int ptr_uni;
	unsigned int* point_to;
	struct PtrInfo* next;
}PtrInfo;

typedef struct func_block {
	basic_block* start;
	basic_block* over;
	struct func_block* prev;
	struct func_block* next;
	int code_num;
	int bb_num;
	int width;
	symtbl_item** uni_table;
	int uni_item_num;
	int uni_table_size;
	
	PtrInfo** p_in;
	PtrInfo** p_out;
	PtrInfo** pointer_status;
	int *ptr_list;
	int ptr_list_size;
	int pointer_num;
	unsigned int **pointed_var;

	unsigned int **live_status;
	unsigned int **v_out;
	unsigned int **v_in;
	unsigned int **def;
	unsigned int **use;

	/**
	 * Following decls are for availiable expression analysis
	 * Written by Brills
	 */
	//avail expr generated by a basic block
	unsigned int **gen;
	//avail expr generated by a basic block
	unsigned int **kill;
	//iteration in for a basic block
	unsigned int **a_in;
	//iteration out for a basic block
	unsigned int **a_out;
	//availiable expression for each POINT
	unsigned int **available_status;
	/*------Brills out -----------*/

	map_table* mapping;
	int map_table_size;
	int *reg_alloc;
	int reg_used;
	int reg_var[32];
	int min_stack_size;
	int global_label;
	int const_str_off;
	CStrList* c_str_used;
	int large_imm_off;
	ImmList* imm_used;
}func_block;

#endif
