#summary AST：抽象语法树

= Abstract Syntax Tree 抽象语法树 =

定义等参见：[http://en.wikipedia.org/wiki/Abstract_syntax_tree Wikipedia:AST]

抽象语法树是minic编译器的核心结构，它在语法分析时建立，包含了源文件中所有用于编译的信息。
在minic的设计中，除语法分析、词法分析、目标代码生成三个部分以外，其余部分均围绕抽象语法树进行：
  * 利用抽象语法树上的“声明”节点建立符号表，“标识符”节点指向其在符号表中的位置
  * 在抽象语法树上的“表达式”节点进行类型检查
  * 利用语法树的“函数”、“复合语句”节点在符号表的配合下进行运行时内存分配
  * 对每个抽象语法树的非终结符节点进行中间代码的翻译

== 实现 ==
minic AST采用左子右兄表示法，用二叉树等价地表达一颗语法树。
AST支持的操作有：
  # 生成一个新节点
  # 给某个节点添加一个最右儿子
  # 不同顺序的遍历

=== 遍历与抽象设计 ===
在所有使用到AST的编译步骤中，对AST所做的操作都是按照一定顺序遍历它，并且根据节点类型的不同应用不同的操作。
因此只需对不同类型的节点定义不同操作，遍历函数可以重用。
我们建立了数张由函数指针组成的线性表，在一些宏定义的配合下，表中的每一项都指向一个函数，该函数就是对某种类型的节点的操作。详见AST.h

== 相关文件 ==
|| AST.h || 抽象语法树相关结构的定义 ||
|| AST_operation.c || 抽象语法树上的相关操作 ||
